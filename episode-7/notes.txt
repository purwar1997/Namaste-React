// useEffect() hook

useEffect() is called after the component is rendered and DOM is updated. This hook is commonly used for DOM manipulation and fetching data form an API. useEffect() takes two arguments, callback and dependency array. Callback is manadatory but dependency array is not. 

- If there is no dependency array, useEffect() runs everytime component is rendered.

- If dependency array is empty, useEffect() runs only once when the component is mounted (initially rendered).

- If dependency array contains some values, then useEffect() runs when the component is mounted or values inside dependency array changes.

// Tips for using useState

- useState() can only be called inside components (true for every hook)
- useState() should be called at the top of components
- useState() shouldn't be used inside for loop, if-else, switch-case and functions 

// React Router

- createBrowserRouter() is used to define the routing configuration of React app
- Page is nothing but a composition of resuable components

- Never use <a> tag to go to a new route in React app because it will refresh the whole page. Page refresh will reset the value of state variables. Use <Link> or <NavLink> component provided by react-router-dom to navigate to new route without reloading the page.

- Two types of routing in web apps

- Client-side routing
- Server-side routing

- In client-side routing, when we navigate to a new route by clicking on a link, no API call is made to the server. In client-side routing, there is only one page on which components replace each other. So browser only updates a specific part of DOM instead of recreating it. These apps are known as Single Page Applications (SPA).

- In multi-page applications, pages replace each other due to which browser re-creates DOM everytime a new HTML document is fetched from the server.

- In server-side routing, when a link is clicked browser makes an API call to fetch HTML document. HTML page returned by server replaces the old HTML page. When a new page is rendered, browser recreates DOM. 

- When a link is clicked browser sends a GET request to URL present inside href attribute of <a> tag to fetch HTML page. This kind of routing is known as Server-side routing. Page reloads and components of that page are mounted again due to which state variables are reinitialized. In server-side routing, component loses its state.

- useParams() is used to access path parameters

- Link and NavLink are React components provided by react-router-dom which internally uses <a> tag. These components are wrapper over <a> tag. Browser doesn't understand Link or NavLink. It understands <a> tag.