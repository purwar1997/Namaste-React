 // Import and Export 
 
 - import and export statements can't be used inside browser scripts or common JS files. They can only be used inside modules. A browser script can be converted into module by adding type='module' attribute to script tag and a common JS file can be converted into module by adding "type": "module" property to package.json file.

 - There are two ways to export values in JS, default exports and named exports. To export only one value from a module, we can use default export. To export multiple values from a module, we have to use named exports.

 - Default export: There can be only one default export in a module and default export can be imported using any name. 

 - Named export: There can be multiple named exports in a module and they have to be imported using same name by which they are exported.

 - We can place one default export and multiple named exports together in a module but it's better to follow the convention of using default export for single value and named exports for multiple values.

// React Hooks

- Hooks are prebuilt JS functions provided by React. These hooks can be used to do many things like managing component state, implementing effects after component is rendered and creating context to pass data. Hooks always start with the 'use' keyword like useState() and useEffect(). Apart from using predefined hooks, we can create our own custom hooks.

// React element

- React elements can be created using two ways:-

- createElement API: createElement() is the native way to create React elements. It takes three arguments: elementType, object which contain attributes and child. Child can be a plain text or another React element.

- JSX: JSX is not HTML or XML inside javascript. JSX is HTML or XML like syntax which combines markup(HTML) and logic(JS) together at one place. Browser can't understand JSX. It can only understand HTML, CSS and JS. So JSX at the end is converted into regular JS objects. Many module bundlers like webpack and parcel internally uses Babel to transpile JSX into JS so that browsers can compile it. 

- Whether we use createElement() or JSX, React elements are plain javascript objects.

// Virtual DOM

- Object-form (javascript) representation of real DOM is called virtual DOM. To create a React element, we can either use createElement() or JSX. Whichever way we use, React elements are plain JS objects. These objects are JS representation of actual DOM. So virtual DOM is nothing but React elements. Since React elements are JS objects, virtual DOM is also an object. 

- Real DOM is tree like representation of HTML tags while virtual DOM is an object-from representation of real DOM.

// Diffing algorithm

- React internally uses diffing algorithm. Whenever a component is re-rendered and UI layer is updated, diffing algorithm calculates differences between old virtual DOM and new virtual DOM and push those differences to real DOM to update it. React updates real DOM only when there is a difference between the virtual DOMs of two renders. 

- React doesn't calculate differences between the real DOMs (HTML tags) of two renders. Instead it uses diffing algorithm to compare virtual DOMs (plain JS objects) of two renders and calculates the diff between them. Because of that React precisely knows which part of UI is modified. So instead of reloading the page and recreating whole DOM, React pushes diff between virtual DOMs to real DOM and updates only a specfic part of it.
React doesn't recreates DOM. Instead, it updates DOM. DOM manipulation is an expensive process and React does it very efficiently. That's why React is fast.